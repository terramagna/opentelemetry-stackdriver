initSidebarItems({"struct":[["Authenticator","Authenticator is responsible for fetching tokens, handling refreshing tokens, and optionally persisting tokens to disk."],["AuthenticatorBuilder","Configure an Authenticator using the builder pattern."],["DefaultHyperClient","The builder value used when the default hyper client should be used."],["DeviceFlowAuthenticator","Create an authenticator that uses the device flow. `# async fn foo() { # let app_secret = yup_oauth2::read_application_secret(\"/tmp/foo\").await.unwrap();     let authenticator = yup_oauth2::DeviceFlowAuthenticator::builder(app_secret)         .build()         .await         .expect(\"failed to create authenticator\"); # }`"],["InstalledFlowAuthenticator","Create an authenticator that uses the installed flow. `# async fn foo() { # use yup_oauth2::InstalledFlowReturnMethod; # let custom_flow_delegate = yup_oauth2::authenticator_delegate::DefaultInstalledFlowDelegate; # let app_secret = yup_oauth2::read_application_secret(\"/tmp/foo\").await.unwrap();     let authenticator = yup_oauth2::InstalledFlowAuthenticator::builder(         app_secret,         InstalledFlowReturnMethod::HTTPRedirect,     )     .build()     .await     .expect(\"failed to create authenticator\"); # }`"],["ServiceAccountAuthenticator","Create an authenticator that uses a service account. `# async fn foo() { # let service_account_key = yup_oauth2::read_service_account_key(\"/tmp/foo\").await.unwrap();     let authenticator = yup_oauth2::ServiceAccountAuthenticator::builder(service_account_key)         .build()         .await         .expect(\"failed to create authenticator\"); # }`"]],"trait":[["HyperClientBuilder","A trait implemented for any hyper::Client as well as the DefaultHyperClient."]]});